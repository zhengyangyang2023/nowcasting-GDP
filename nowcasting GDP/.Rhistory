Zsmooth<-t(res_runKF$xsmooth) #398*53。原数据后面整行缺失的已经预测好。无缺失值。
x_sm <- Zsmooth[2:dim(Zsmooth)[1],]%*%t(C) #397行25列
# x_sm不就是下面的FF乘以C吗
Res<-list()
Res$x_sm <- x_sm #数据的平滑值(标准化后)397行25列
Res$X_sm <- kronecker(t(Wx),rep(1,TT))*x_sm + kronecker(t(Mx),rep(1,TT))#数据的平滑值(未标准化)397行25列
Res$FF <- Zsmooth[2:dim(Zsmooth)[1],]#397行53列，状态变量的平滑值。
#--------------------------------------------------------------------------
#  Loading the structure with the results
#--------------------------------------------------------------------------
Res$C <- C;
Res$R <- R;
Res$A <- A;
Res$Q <- Q;
Res$Mx <- Mx;#X的每列的均值(去除na)
Res$Wx <- Wx;#X的每列的标准差(去除na)
Res$Z_0 <- Z_0;
Res$V_0 <- V_0;
Res$r <- r;
Res$p <- p;
Res$loglik <- loglik;
return(Res)
}
EMstep <- function(y = NULL, A = NULL, C = NULL, Q = NULL, R = NULL, Z_0 = NULL, V_0 = NULL,
r = NULL, p = NULL, R_mat = NULL, q = NULL, nQ = NULL, i_idio = NULL, blocks = NULL){
n <- dim(y)[1] #25
TT <- dim(y)[2] #385
nM <- n - nQ #23
pC <- dim(R_mat)[2] #5
ppC <- max(p,pC) #5
n_b <- dim(blocks)[2] #4
# Compute the (expected) sufficient statistics for a single Kalman filter sequence.
#Running the Kalman filter with the current estimates of the parameters
res_runKF = runKF(y, A, C, Q, R, Z_0, V_0);
Zsmooth<-res_runKF$xsmooth #53行386列
Vsmooth<-res_runKF$Vsmooth
VVsmooth<-res_runKF$VVsmooth
loglik<-res_runKF$loglik
A_new <- A
Q_new <- Q
V_0_new <- V_0
#更新A，Q，V0的前4个对角阵
for(i in 1:n_b){
r_i <- r[i]
rp <- r_i*p
if(i == 1){
rp1 <- 0*ppC
}else{
rp1 <- sum(r[1:(i-1)])*ppC #i=4时，为3r*5=15r
}
A_i <- A[(rp1+1):(rp1+r_i*ppC), (rp1+1):(rp1+r_i*ppC)]
Q_i <- Q[(rp1+1):(rp1+r_i*ppC), (rp1+1):(rp1+r_i*ppC)]
if(rp==1){
EZZ <- t(Zsmooth[(rp1+1):(rp1+rp),2:ncol(Zsmooth)]) %*% Zsmooth[(rp1+1):(rp1+rp),2:ncol(Zsmooth)] +
sum(Vsmooth[(rp1+1):(rp1+rp),(rp1+1):(rp1+rp),2:dim(Vsmooth)[3]])  # E(Z'Z)
EZZ_BB <- t(Zsmooth[(rp1+1):(rp1+rp),1:(ncol(Zsmooth)-1)]) %*% Zsmooth[(rp1+1):(rp1+rp),1:(ncol(Zsmooth)-1)] +
sum(Vsmooth[(rp1+1):(rp1+rp),(rp1+1):(rp1+rp),1:(dim(Vsmooth)[3]-1)]) #E(Z(-1)'Z_(-1))
EZZ_FB <- t(Zsmooth[(rp1+1):(rp1+rp),2:ncol(Zsmooth)]) %*% Zsmooth[(rp1+1):(rp1+rp),1:(ncol(Zsmooth)-1)] +
sum(VVsmooth[(rp1+1):(rp1+rp),(rp1+1):(rp1+rp),]) #E(Z'Z_(-1))
}else{
EZZ <- (Zsmooth[(rp1+1):(rp1+rp),2:ncol(Zsmooth)]) %*% t(Zsmooth[(rp1+1):(rp1+rp),2:ncol(Zsmooth)]) +
apply(Vsmooth[(rp1+1):(rp1+rp),(rp1+1):(rp1+rp),2:dim(Vsmooth)[3]],c(1,2),sum)  # E(Z'Z)。
EZZ_BB <- (Zsmooth[(rp1+1):(rp1+rp),1:(ncol(Zsmooth)-1)]) %*% t(Zsmooth[(rp1+1):(rp1+rp),1:(ncol(Zsmooth)-1)]) +
apply(Vsmooth[(rp1+1):(rp1+rp),(rp1+1):(rp1+rp),1:(dim(Vsmooth)[3]-1)],c(1,2),sum) #E(Z(-1)'Z_(-1))
EZZ_FB <- (Zsmooth[(rp1+1):(rp1+rp),2:ncol(Zsmooth)]) %*% t(Zsmooth[(rp1+1):(rp1+rp),1:(ncol(Zsmooth)-1)]) +
apply(VVsmooth[(rp1+1):(rp1+rp),(rp1+1):(rp1+rp),],c(1,2),sum) #E(Z'Z_(-1))
}
A_i[1:r_i,1:rp] <- EZZ_FB[1:r_i,1:rp] %*% solve(EZZ_BB[1:rp,1:rp])
Q_i[1:r_i,1:r_i] <- (EZZ[1:r_i,1:r_i] - A_i[1:r_i,1:rp] %*% t(matrix(EZZ_FB[1:r_i,1:rp],r_i,rp))) / TT
A_new[(rp1+1):(rp1+r_i*ppC),(rp1+1):(rp1+r_i*ppC)] <- A_i #rp1=0
Q_new[(rp1+1):(rp1+r_i*ppC),(rp1+1):(rp1+r_i*ppC)] <- Q_i;
V_0_new[(rp1+1):(rp1+r_i*ppC),(rp1+1):(rp1+r_i*ppC)] <- Vsmooth[(rp1+1):(rp1+r_i*ppC),(rp1+1):(rp1+r_i*ppC),1]
}
rp1 <- sum(sum(r))*ppC #20
niM <- sum(i_idio[1:nM]) #23
# idiosyncratic
EZZ <- diag(diag(Zsmooth[(rp1+1):nrow(Zsmooth),2:ncol(Zsmooth)] %*% t(Zsmooth[(rp1+1):nrow(Zsmooth),2:ncol(Zsmooth)]))) + diag(diag(apply(Vsmooth[(rp1+1):dim(Vsmooth)[1],(rp1+1):dim(Vsmooth)[2],2:dim(Vsmooth)[3]], MARGIN = 1:2, FUN = sum))) #E(Z'Z)
EZZ_BB <- diag(diag(Zsmooth[(rp1+1):nrow(Zsmooth),1:(ncol(Zsmooth)-1)] %*% t(Zsmooth[(rp1+1):nrow(Zsmooth),1:(ncol(Zsmooth)-1)]))) + diag(diag(apply(Vsmooth[(rp1+1):dim(Vsmooth)[1],(rp1+1):dim(Vsmooth)[2],1:(dim(Vsmooth)[3]-1)], MARGIN = 1:2, FUN = sum)))  #E(Z(-1)'Z_(-1))
EZZ_FB <- diag(diag(Zsmooth[(rp1+1):nrow(Zsmooth),2:ncol(Zsmooth)] %*% t(Zsmooth[(rp1+1):nrow(Zsmooth),1:(ncol(Zsmooth)-1)]))) + diag(diag(apply(VVsmooth[(rp1+1):dim(VVsmooth)[1],(rp1+1):dim(VVsmooth)[2],], MARGIN = 1:2, FUN = sum))) #E(Z'Z_(-1))
A_i <- EZZ_FB %*% diag(1/diag(EZZ_BB))
Q_i <- (EZZ - A_i %*% t(EZZ_FB)) / TT
A_new[(rp1+1):(rp1+niM),(rp1+1):(rp1+niM)] <- A_i[1:niM,1:niM] #更新A[21:43,21:43]
Q_new[(rp1+1):(rp1+niM),(rp1+1):(rp1+niM)] <- Q_i[1:niM,1:niM]
V_0_new[(rp1+1):(rp1+niM),(rp1+1):(rp1+niM)] <- diag(diag(Vsmooth[(rp1+1):(rp1+niM),(rp1+1):(rp1+niM),1]))
Z_0 <- Zsmooth[,1]
nanY<-is.na(y)
y[nanY] <- 0
# LOADINGS
C_new <- C
# Blocks
bl <- unique(blocks) #去除重复的行。
n_bl <- dim(bl)[1] #4
bl_idxM <- NULL
bl_idxQ <- NULL
R_con <- NULL
q_con <- NULL
for(i in 1:n_b){
bl_idxQ <- cbind(bl_idxQ, matlab::repmat(bl[,i],1,r[i]*ppC)) #bl_idxQ 为 1,1,1（实证）
bl_idxM <- cbind(bl_idxM, matlab::repmat(bl[,i],1,r[i]), matlab::zeros(n_bl,r[i]*(ppC-1)))
if(i == 1){
R_con <- kronecker(R_mat,diag(r[i]))
}else{
R_con <- as.matrix(Matrix::bdiag(R_con, kronecker(R_mat,diag(r[i]))))
}
q_con <- rbind(q_con, matlab::zeros(r[i]*dim(R_mat)[1],1))
}
bl_idxM <- bl_idxM == 1
bl_idxQ <- bl_idxQ == 1
#idio
i_idio_M <- i_idio[1:nM] #23个T
n_idio_M <- length(which(i_idio_M)) #23
c_i_idio <- cumsum(i_idio)
for(i in 1:n_bl){
bl_i <- bl[i,]
rs <- sum(r[bl_i == 1])
idx_i <- NULL
for(k in 1:nrow(blocks)){
idx_i[k] <- sum(blocks[k,] == bl_i) == dim(blocks)[2]
}
idx_i <- which(idx_i)
# MONTHLY--------------
idx_iM <- idx_i[idx_i < (nM + 1)]
n_i <- length(idx_iM)#3
if(n_i==0){
denom <- NULL
nom <- NULL
} else {
denom <- matlab::zeros(n_i*rs,n_i*rs) #6*6
nom <- matlab::zeros(n_i,rs) #3*2
i_idio_i <- i_idio_M[idx_iM] == 1 #3个T
i_idio_ii <- c_i_idio[idx_iM]
i_idio_ii <- i_idio_ii[i_idio_i]
temp = which(c(bl_idxM[i,],rep(0,nrow(Zsmooth)-ncol(bl_idxM)))==1)
for(t in 1:TT){ #TT=385
# t=1
nanYt <- diag(!nanY[idx_iM,t])
denom <- denom + kronecker(Zsmooth[temp,t+1] %*% t(Zsmooth[temp,t+1]) + Vsmooth[temp,temp,t+1], nanYt)
nom <- nom + y[idx_iM,t] %*% t(Zsmooth[temp,t+1]) - nanYt[,i_idio_i] %*% (Zsmooth[rp1+i_idio_ii,t+1] %*% t(Zsmooth[temp,t+1]) + Vsmooth[rp1+i_idio_ii,temp,t+1])
}
vec_C <- solve(denom) %*% c(nom)
C_new[idx_iM,temp] <- matrix(vec_C,n_i,rs)
}
# QUARTERLY------------------
idx_iQ <- idx_i[idx_i>c(nM)] #idx_i为1,2,6,25。idx_iQ=25
rps <- rs*ppC #10
R_con_i <- R_con[,bl_idxQ[i,]]
q_con_i <- q_con #16*1的0
no_c <- !(rowSums(R_con_i == 0) == ncol(R_con_i))
R_con_i <- R_con_i[no_c,]
q_con_i <- q_con_i[no_c,]
####
for(j in idx_iQ){ #idx_iQ=25
denom <- matlab::zeros(rps,rps)
nom <- matlab::zeros(1,rps)
idx_jQ <- j-nM
if(1 == 1){
i_idio_jQ <- (rp1+n_idio_M+3*(idx_jQ-1)+1):(rp1+n_idio_M+3*idx_jQ)
#rp1=20,对于j=25,49:53;对于j=24,44:48。39:41（实证）
V_0_new[i_idio_jQ,i_idio_jQ] <- Vsmooth[i_idio_jQ,i_idio_jQ,1]
A_new[i_idio_jQ[1],i_idio_jQ[1]] <- A_i[i_idio_jQ[1]-rp1,i_idio_jQ[1]-rp1]#rp1=20
Q_new[i_idio_jQ[1],i_idio_jQ[1]] <- Q_i[i_idio_jQ[1]-rp1,i_idio_jQ[1]-rp1]
temp = which(c(bl_idxQ[i,],rep(0,nrow(Zsmooth)-ncol(bl_idxQ)))==1)#1,2,3（实证）
for(t in 1:TT){
nanYt <- as.vector(!nanY[j,t])*1
# nn2 <- sum(bl_idxQ[i,])
denom <- denom + kronecker(Zsmooth[temp,t+1] %*% t(Zsmooth[temp,t+1]) + Vsmooth[temp,temp,t+1],nanYt)
nom <- nom + y[j,t] %*% t(Zsmooth[temp,t+1])
nom <- nom - nanYt %*% (matrix(c(1,1,1), nrow = 1) %*% Zsmooth[i_idio_jQ,t+1] %*% t(Zsmooth[temp,t+1]) +
matrix(c(1,1,1), nrow = 1) %*% Vsmooth[i_idio_jQ,temp,t+1])
}
C_i <- solve(denom) %*% t(nom)
C_i_constr <- C_i - solve(denom) %*% t(R_con_i) %*% solve(R_con_i %*% solve(denom) %*% t(R_con_i)) %*% (R_con_i %*% C_i - q_con_i)
C_new[j,temp] <- C_i_constr
}
}
}
#更新R
R_new <- matlab::zeros(n,n)
for(t in 1:TT){
nanYt <- diag(!nanY[,t])*1 == 1
R_new <- R_new + (y[,t] - nanYt %*% C_new %*% Zsmooth[,t+1]) %*% t(y[,t] - nanYt %*% C_new %*% Zsmooth[,t+1])
+ nanYt %*% C_new %*% Vsmooth[,,t+1] %*% t(C_new) %*% nanYt + (diag(n)-nanYt) %*% R %*% (diag(n)-nanYt)
}
R_new <- R_new/TT
RR <- diag(R_new) #RR(RR<1e-2) = 1e-2;
RR[i_idio_M] <- 1e-04
if(nM<length(RR)){
RR[(nM+1):length(RR)] <- 1e-04
}
R_new <- diag(RR)
if(!is.matrix(Z_0)){
Z_0<-matrix(Z_0,length(Z_0),1)
}
# output
return(list(C_new = C_new, R_new = R_new, A_new = A_new, Q_new = Q_new, Z_0 = Z_0, V_0 = V_0_new, loglik = loglik))
}
FIS <- function(Y,Z,R,TT,Q,S){
m<-dim(S$Am)[1]
nobs<-dim(S$Am)[2]
S$AmT           = matlab::zeros(m,nobs+1)
S$PmT           = array(0,c(m,m,nobs+1))
S$AmT[,nobs+1] <- S$AmU[,nobs+1]
S$PmT[,,nobs+1] <- S$PmU[,,nobs+1]
S$PmT_1<-array(0,c(m,m,nobs))
S$PmT_1[,,nobs] <- (diag(m)-S$KZ)%*%TT%*%S$PmU[,,nobs]
if(length(S$Pm[,,nobs])==1){pinv = 1/S$Pm[,,nobs]}else{pinv<-corpcor::pseudoinverse(S$Pm[,,nobs])}
J_2 <- S$PmU[,,nobs]%*%t(TT)%*%pinv
for (t in nobs:1){
PmU <- S$PmU[,,t]
Pm1 <- S$Pm[,,t]
P_T <- S$PmT[,,t+1]
P_T1 <- S$PmT_1[,,t]
J_1 <- J_2
S$AmT[,t] <- S$AmU[,t] + J_1%*%(S$AmT[,t+1] - TT%*%S$AmU[,t])
S$PmT[,,t] <- PmU + J_1%*%(P_T - Pm1)%*%t(J_1)
if(t>1){
if(length(S$Pm[,,t-1])==1){pinv = 1/S$Pm[,,t-1]}else{pinv<-corpcor::pseudoinverse(S$Pm[,,t-1])}
J_2 <- S$PmU[,,t-1]%*%t(TT)%*%pinv
S$PmT_1[,,t-1] = PmU%*%t(J_2)+J_1%*%(P_T1-TT%*%PmU)%*%t(J_2)
}
}
return(S)
}
SKF <-function(Y,Z,R,TT,Q,A_0,P_0){
n <- dim(Z)[1]
m <- dim(Z)[2]
nobs  <- dim(Y)[2]
S<-list()
S$Am <- array(NA,c(m,nobs)) #m行nobs列的NA值
S$Pm <- array(NA,c(m,m,nobs))
S$AmU <- array(NA,c(m,nobs+1))
S$PmU <- array(NA,c(m,m,nobs+1))
S$loglik <- 0
Au <- A_0;  # A_0|0;
Pu <- P_0;  # P_0|0
S$AmU[,1]    = Au;
S$PmU[,,1]  = Pu;
for(t in 1:nobs){
A <- TT%*%Au;
P <- TT%*%Pu%*%t(TT) + Q;
P <-  0.5*(P+t(P))
# handling the missing data
res_MissData <- MissData(y=Y[,t],C=Z,R=R)
y_t <- res_MissData$y
Z_t <- res_MissData$C
R_t <- res_MissData$R
L_t <- res_MissData$L
# if(is.null(y_t)){
if(sum(is.na(y_t))==length(y_t)){
Au <- A
Pu <- P
} else {
if(!is.matrix(Z_t)){
Z_t<-t(as.matrix(Z_t)) #又加上了转置
}
PZ  <- P%*%t(Z_t)
iF  <- solve(Z_t%*%PZ + R_t)
PZF <- PZ%*%iF
V <- y_t - Z_t%*%A
Au <- A  + PZF%*%V
Pu <- P  - PZF%*%t(PZ)
Pu <-  0.5*(Pu+t(Pu))
S$loglik <- S$loglik + 0.5*(log(det(iF))  - t(V)%*%iF%*%V) #对数似然函数越大越好
}
S$Am[,t] <- A
S$Pm[,,t] <- P
# Au = A_t|t   & Pu = P_t|t
S$AmU[,t+1] <- Au
S$PmU[,,t+1] <- Pu
} # t
if(sum(is.na(y_t))==length(y_t)){
S$KZ <- matlab::zeros(m,m)
}else{
S$KZ <- PZF%*%Z_t
}
return(S)
}
MissData <- function(y,C,R){
ix <- !is.na(y) # y为向量
e  <- diag(length(y))
L  <- e[,ix]
y <-    y[ix]
if(dim(C)[1]==1){C = C[ix]}else{C  <-  C[ix,]}
R  <-  R[ix,ix]
return(list(y=y,C=C,R=R,L=L))
}
runKF <- function(y, A, C, Q, R, x_0, Sig_0){
# x_0 = Z_0; Sig_0 = V_0
S <- SKF(Y=y,Z=C,R=R,TT=A,Q=Q, A_0=x_0, P_0=Sig_0);
S <- FIS(Y=y,Z=C,R=R,TT=A,Q=Q,S=S);
xsmooth <- S$AmT;
Vsmooth <- S$PmT;
VVsmooth <- S$PmT_1;
loglik <- S$loglik;
return(list(xsmooth = xsmooth,Vsmooth = Vsmooth,VVsmooth = VVsmooth,loglik = loglik))
}
em_converged <- function(loglik = NULL, previous_loglik = NULL, threshold = NULL, check_increased = NULL){
nargin <- 4 - sum(c(is.null(loglik), is.null(previous_loglik), is.null(threshold), is.null(check_increased)))
if(nargin < 3){threshold <- 1e-4}
if(nargin < 4){check_increased <- 1}
converged <- 0
decrease <- 0
if(!is.null(check_increased)){
if(loglik - previous_loglik < -1e-3){ # allow for a little imprecision
message(paste("******likelihood decreased from",round(previous_loglik,4),"to",round(loglik,4)))
decrease <- 1
}
}
delta_loglik <- abs(loglik - previous_loglik)
avg_loglik <- (abs(loglik) + abs(previous_loglik) + 2.2204e-16)/2
if((delta_loglik / avg_loglik) < threshold){converged <- 1}
# output
list(converged = converged, decrease = decrease)
}
nowcastEM <- function(formula, data, r = NULL, q = NULL, p = NULL, method = 'EM', blocks = NULL, frequency = NULL,max_iter= NULL){
library(matlab)
# Checking user inputs
# check formula
if(is.character(formula)){
formula <- as.formula(formula)
}
# the number of factors, shocks, and lags
if(is.null(q) | is.null(r) | is.null(p)){
warnings('Parameters q, r and p must be specified.')
}
# the frequencies of the variables
if(length(frequency) != ncol(data)){
stop("the length of the frequency vector must be the same as the number of variables in the data object")
}
if(sum(!frequency%in% c(12,4))!=0){
stop("The frequencies should be a vector of numerics taking values 4 (quarterly) or 12 (monthly)")
}
# preparing the data
k <- model.frame(formula, data, na.action = NULL) #25个指标
y_position <- which(colnames(data) == colnames(k)[1])
freq_y <- frequency[y_position]
if(freq_y == 4){
y <- month2qtr(ts(k[,1], start = start(data), frequency = 12))
}else{
y <- ts(k[,1], start = start(data), frequency = 12)
}
# selecting the method
if(method == 'EM'){
# checking validity of inputs
if(p > 5){
stop('Parameter p must be less or equal to 5.')
}
if(is.null(blocks)){
stop("The block structure determining which variables load into which factors should be specified.")
}
if(!is.null(q)){
message("Obs: for this estimation method the number of common shocks is assumed to be equal to the number of factors, i.e. q = r.")
}
blocks <- as.matrix(blocks) # variables should be rows, columns the blocks
n_blocks <- dim(blocks)[2]
x <- ts(model.frame(formula, data, na.action = NULL), start = start(data), frequency = frequency(data))
# new frequency
new_frequency <- c(frequency[y_position], frequency[-y_position])
# reshuffling the blocks
blocks <- rbind(matrix(blocks[y_position,],ncol = n_blocks),matrix(blocks[-y_position,], ncol = n_blocks))
# determine the number of quarterly series
nQ <- sum(new_frequency==4)
# preparing X
# 1) all quarterly series should be positioned at the last columns
# reshuffle vector
idx <- cumsum(rep(1,dim(x)[2]))
V_Q <- which(new_frequency==4)
if(is.integer(V_Q) && length(V_Q) == 0){
idx_new <- idx
}else{
idx_M <- idx[-V_Q]
idx_new <- c(idx_M,V_Q) #指标索引，月度在前，季度在后
}
# adapting data base
x <- x[,idx_new]
# adapting blocks
blocks <- as.matrix(blocks[idx_new,]) #将季度频率指标的blocks行放在最后几行
# 2) position of the target variable
y_pos <- which(colnames(x)==colnames(k)[1])
Par <- list(r = rep(r,n_blocks), # Number of common factors
p = p, # Number of lags in autoregressive of factor (same for all factors)
max_iter = max_iter, # max number of itereations for the EM loop
i_idio = c(rep(T,dim(x)[2]-nQ), rep(F,nQ)),
Rconstr = matrix(c(1,1,-1,0,0,-1),2,3),
q = matrix(rep(0,2),2,1),
nQ = nQ, # Number of quarterly series
blocks = blocks # Block loadings
)
Res <- EM_DFM_SS_block_idioQARMA_restrMQ(x,Par)
# recovering the factors
idx_factor <- c(1:r)
if(dim(blocks)[2]>1){
idx_factor_aux <- lapply(X = seq(1,dim(blocks)[2]-1), FUN = function(x){(x*r*5 + 1):(x*r*5 + r)})
for(j in 1:length(idx_factor_aux)){idx_factor <- append(idx_factor, idx_factor_aux[[j]])}
}
# Factors and estimated explanatory variables
factors <- list(dynamic_factors = ts(Res$FF[,idx_factor], start = start(x), frequency = 12))#397*4,idx_factor为1,6,11,16
names(factors$dynamic_factors) <- as.vector(sapply(X = 1:dim(blocks)[2],FUN = function(X){paste0("Block",X,"_factor",1:r)}))
fore_x <- ts(Res$X_sm, start = start(x), frequency = 12)#397*25，后面的缺失都已预测好
colnames(fore_x) <- colnames(x)
# Fitted Values
# finding varepsilon in the FF matrix
ncol_eps <- nQ*2+ncol(x)
idx_eps <- (ncol(Res$FF)-ncol_eps+1):ncol(Res$FF)
idx_eps_y <- ncol(Res$FF)-ncol_eps+which(Res$C[y_pos,idx_eps]>0)
# finding the autocorelation coefficient of the AR(1) process imposed on varepsilon
alpha <- solve(t(Res$FF[-nrow(Res$FF),min(idx_eps_y)])%*%Res$FF[-nrow(Res$FF),min(idx_eps_y)])%*%(t(Res$FF[-nrow(Res$FF),min(idx_eps_y)])%*%Res$FF[-1,min(idx_eps_y)])
# y monthly
if(new_frequency[idx_new[y_pos]]==12){
# expected error in next period
error_hat <- c(0,rep(alpha,nrow(Res$FF)-1)*Res$FF[-nrow(Res$FF),min(idx_eps_y)])
yprev <- ts(Res$FF[,1:(ncol(Res$FF)-ncol_eps)]%*%Res$C[y_pos,1:(ncol(Res$FF)-ncol_eps)]+error_hat, start = start(x), frequency = 12)
# denormalize the fitted values
yprev <- yprev*Res$Wx[y_pos]+Res$Mx[y_pos] #去除标准化
yprevmonth <- c()
yprevmonth1 <- c()
# observed values
y <- x[,y_pos]
}
# y quarterly
if(new_frequency[idx_new[y_pos]]==4){
yprev <- ts(as.vector(Res$FF[,1:(ncol(Res$FF)-ncol_eps)]%*%Res$C[y_pos,1:(ncol(Res$FF)-ncol_eps)]+rowSums(Res$FF[,idx_eps_y])), start = start(x), frequency = 12)
yprev1 <- ts(as.vector(as.matrix(Res$FF[,1:r],ncol=r)%*%Res$C[y_pos,1:r]+Res$FF[,idx_eps_y[1]]), start = start(x), frequency = 12)
yprevmonth1 <- yprev1*Res$Wx[y_pos]*3+Res$Mx[y_pos] #月度GDP同比
# denormalize the fitted values
yprev <- yprev*Res$Wx[y_pos]+Res$Mx[y_pos]
yprevmonth <- yprev[c(length(yprev)-2,length(yprev)-1,length(yprev))]
# quarterly values
yprev <- month2qtr(yprev)#nowcasting::month2qtr(yprev,reference_month = "mean")
# observed values
y <- month2qtr(x[,y_pos])
}
# Observed and forecast y
Y <- cbind(y,yprev,yprev)
Y[is.na(Y[,1]),2] <- NA
Y[!is.na(Y[,1]),3] <- NA
colnames(Y) <- c('y','in','out')
# forecast X
fore_x <- fore_x[,-y_pos]
colnames(fore_x) <- colnames(x)[-y_pos]
res <- list(yfcst = Y,
yfcstmonth = yprevmonth,
yfcstmonth1 = yprevmonth1,
factors = factors,
xfcst = fore_x,
Res = Res
)
}
# output
return(res)
}
# 预测---------------
library(openxlsx)
dataindex <- read.xlsx("model_spec.xlsx")
setwd("D:/GitHub_commit/nowcasting GDP/nowcasting GDP")
dataindex <- read.xlsx("model_spec.xlsx")
dataindex <- read.xlsx("./Input/model_spec.xlsx")
process_fun <- function(x, method){
n = length(x)
if(method == 'ch1'){
res = c(NA,x[2:n]/x[1:(n-1)]-1)
}else if(method == 'lin'){
res = x
}
return(res)
}
process_data <- function(date1){
data0 <- read.xlsx(paste0('./Input/',date1,'.xlsx'),1,rowNames = T,detectDates = T)
name1 = names(data0)
data1 <- data0
block1 = matrix(NA,nrow = ncol(data0),ncol = 4)
for(i in 1:ncol(data0)){
temp = dataindex[dataindex['SeriesID'] == name1[i],]
data1[,i] = process_fun(data0[,i], method = temp[,'Transformation'])
block1[i,] <- as.numeric(temp[,c("Block1-Global","Block2-Soft","Block3-Real","Block4-Price_Currency")])
}
res <- list()
res[['process_data']] = data1
res[['process_block']] = block1
return(res)
}
mynowcast <- function(data0,h){ #h为向前预测的期数，h=0预测当前季度，h=1预测当前季度和下一个季度
mod1 = nrow(data0)%%3
if(mod1==0){mod1 = 3}
k = ncol(data0)-1 #月度指标个数
# 在后面填充NA行，最终数据的行数必须为3的倍数
NA1 = as.data.frame(matrix(NA, ncol=k+1, nrow=3*h+3-mod1))
names(NA1) <- names(data0)
data1 <- rbind(data0,NA1)
data2 <- ts(data1,frequency = 12,start = c(2009,1))
frequency1 = c(4,rep(12,k))
nowEM_tongbi <- nowcastEM(formula = GDP ~ ., data = data2, r = 1, p = 1,
method = "EM", blocks = block1, frequency = frequency1,max_iter=500)
pre <- nowEM_tongbi[["yfcst"]]
time1 = zoo::as.Date(pre)[(nrow(pre)-h):nrow(pre)]
date1 = zoo::as.yearqtr(time1,format = "%Y-%m-%d")
nowpre <- data.frame(date = date1, forecast = pre[(nrow(pre)-h):nrow(pre),3])
return(nowpre)
}
date0 = read.table('date.txt') #数据截止日期
h0 = read.table('horizon.txt') #向前预测期数
date0 = read.table('./Input/date.txt') #数据截止日期
h0 = read.table('./Input/horizon.txt') #向前预测期数
h = h0[1,1]
for(date1 in date0[,1]){
res1 = process_data(date1)
data1 = res1$process_data
block1 = res1$process_block
res = mynowcast(data1,h)
write.xlsx(res,paste0('./Output/',date1,'_horizon_',h,'.xlsx'),rowNames = FALSE)
message(date1,' has been output')
}
